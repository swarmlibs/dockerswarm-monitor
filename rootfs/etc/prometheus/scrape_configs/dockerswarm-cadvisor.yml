scrape_configs:

  - job_name: 'dockerswarm-cadvisor'

    dockerswarm_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        role: tasks
        filters:
          - name: label
            values: 
              - io.prometheus.job_name=cadvisor
          - name: desired-state
            values: [ running ]

    relabel_configs:
      # ================================================================================
      # Keep or drop targets with the following rules
      # ================================================================================

      # Keep only tasks with desired state "running"
      - source_labels:
        - __meta_dockerswarm_task_desired_state
        regex: running
        action: keep

      # Keep only tasks connected to the "dockerswarm_monitor" network
      - source_labels:
        - __meta_dockerswarm_network_name
        regex: (^dockerswarm_monitor$)
        action: keep

      # Override prometheus internal labels
      # ================================================================================
      # - io.prometheus.enabled=<true|false>
      # - io.prometheus.scrape_scheme=<scheme>
      # - io.prometheus.scrape_port=<port>
      # - io.prometheus.metrics_path=<path>
      # - io.prometheus.param_<name>=<value>
      # ================================================================================

      # io.prometheus.enabled=<true|false>
      - source_labels:
        - __meta_dockerswarm_service_label_io_prometheus_enabled
        regex: 'true'
        action: keep

      # io.prometheus.scrape_scheme=<scheme>
      - source_labels:
        - __meta_dockerswarm_service_label_io_prometheus_scrape_scheme
        target_label: __scheme__
        regex: (https?)

      # io.prometheus.scrape_port=<port>
      - source_labels:
        - __address__
        - __meta_dockerswarm_service_label_io_prometheus_scrape_port
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2

      # io.prometheus.metrics_path=<path>
      - source_labels:
        - __meta_dockerswarm_service_label_io_prometheus_metrics_path
        target_label: __metrics_path__

      # io.prometheus.param_<name>=<value>
      - regex: __meta_dockerswarm_service_label_io_prometheus_param_(.+)
        action: labelmap
        replacement: __param_$1

      # Set "instance" label to Node Hostname
      - source_labels:
        - __meta_dockerswarm_node_address
        target_label: instance

      # Set "job" label to Docker Swarm's Service Name combined with "namespace" labels
      # e.g. <com.docker.stack.namespace>/<io.prometheus.job_name>
      - source_labels:
        - __meta_dockerswarm_service_label_com_docker_stack_namespace
        - __meta_dockerswarm_service_label_io_prometheus_job_name
        target_label: job
        separator: /

      # ================================================================================
      # Label mapping
      # ================================================================================
      - action: labelmap
        regex: __meta_dockerswarm_service_label_com_(docker_stack_.+)
      - action: labelmap
        regex: __meta_dockerswarm_service_label_com_(docker_service_.+)
      - action: labelmap
        regex: __meta_dockerswarm_task_(id|container_id)
        replacement: docker_task_$1

      - action: replace
        source_labels:
        - __meta_dockerswarm_service_name
        - __meta_dockerswarm_task_slot
        - __meta_dockerswarm_task_id
        target_label: container
        separator: '.'

      # ================================================================================
      # Kubernetes compatible relabeling
      # - namespace
      # - deployment
      # - pod
      # ================================================================================

      # Set Kubernetes's Namespace with "com.docker.stack.namespace" label
      - source_labels:
        - __meta_dockerswarm_service_label_com_docker_stack_namespace
        target_label: namespace

      # Set Kubernetes's Deployment with "com.docker.stack.namespace" label
      - source_labels:
        - __meta_dockerswarm_service_label_com_docker_stack_namespace
        target_label: deployment

      # Set Kubernetes' Service Name with Docker Swarm's Service Name
      - source_labels:
        - __meta_dockerswarm_service_name
        target_label: service
        separator: '.'

      # Set Kubernetes' Pod Name with Docker Swarm's Service Name
      - source_labels:
        - __meta_dockerswarm_service_name
        target_label: pod
        separator: '.'

    metric_relabel_configs:
      # Set "container" to the Docker Swarm's Task Name of the target container
      - source_labels:
        - name
        target_label: container

      # ================================================================================
      # Label mapping
      # ================================================================================
      - action: labelmap
        regex: container_label_com_(docker_.*)

      # ================================================================================
      # Kubernetes compatible relabeling
      # - namespace
      # - deployment
      # - pod
      # ================================================================================
      # # Set Kubernetes's Namespace with "com.docker.stack.namespace" label
      - source_labels:
        - container_label_com_docker_stack_namespace
        target_label: namespace

      # Set Kubernetes's Deployment with "com.docker.stack.namespace" label
      - source_labels:
        - container_label_com_docker_stack_namespace
        target_label: deployment

      # Set Kubernetes's Pod Name with Docker Swarm's Service Name
      - source_labels:
        - container_label_com_docker_swarm_service_name
        target_label: pod
