# yaml-language-server: $schema=https://raw.githubusercontent.com/swarmlibs/dockerstack-schema/main/schema/dockerstack-spec.json

x-default-logging: &x-default-logging
  options:
    max-size: "12m"
    max-file: "5"
  driver: json-file

x-exporter-resources-constraints: &x-exporter-resources-constraints
  limits:
    memory: 128M
  reservations:
    memory: 64M

volumes:
  prometheus-data:

networks:
  dockerswarm_monitor:
    name: dockerswarm_monitor
    attachable: true

services:

  # ====================================================
  # Blackbox prober exporter
  # https://github.com/prometheus/prometheus
  # ====================================================

  prometheus:
    image: swarmlibs/prometheus:local
    deploy:
      mode: global
      placement:
        max_replicas_per_node: 1
        constraints:
          - node.role == manager
      labels:
        io.prometheus.role: "prometheus"
        io.prometheus.dockerswarm-tasks.should_be_scraped: "false"
        io.prometheus.dockerswarm-services.should_be_probed: "false"
    logging: *x-default-logging
    ports:
      - published: 9090
        target: 9090
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - prometheus-data:/prometheus/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    hostname: prometheus.svc.cluster.local
    networks:
      - dockerswarm_monitor

  # ====================================================
  # Blackbox prober exporter
  # https://github.com/prometheus/blackbox_exporter
  # ====================================================

  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    deploy:
      replicas: 1
      resources: *x-exporter-resources-constraints
      labels:
        io.prometheus.enabled: "true"
        io.prometheus.job_name: "blackbox-exporter"
        io.prometheus.scrape_port: "9115"
        io.prometheus.metrics_path: "/metrics"
        io.prometheus.dockerswarm-services.should_be_probed: "false"
    logging: *x-default-logging
    ports:
      - published: 9115
        target: 9115
        mode: host
    hostname: blackbox-exporter.svc.cluster.local
    networks:
      - dockerswarm_monitor

  # ====================================================
  # Node exporter
  # https://github.com/prometheus/node_exporter
  # ====================================================

  node-exporter:
    image: prom/node-exporter:v1.5.0
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    logging: *x-default-logging
    ports:
      - published: 9100
        target: 9100
        mode: host
    deploy:
      mode: global
      resources: *x-exporter-resources-constraints
      labels:
        io.prometheus.role: "node-exporter"
        io.prometheus.dockerswarm-tasks.should_be_scraped: "false"
        io.prometheus.dockerswarm-services.should_be_probed: "false"
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /proc
        target: /host/proc
        read_only: true
      - type: bind
        source: /sys
        target: /host/sys
        read_only: true
    hostname: "node-exporter.{{.Node.ID}}.cluster.local"
    networks:
      - dockerswarm_monitor

  # ====================================================
  # cAdvisor
  # https://github.com/google/cadvisor
  # ====================================================

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    command: -logtostderr -docker_only
    deploy:
      mode: global
      resources: *x-exporter-resources-constraints
      labels:
        io.prometheus.role: "cadvisor"
        io.prometheus.dockerswarm-tasks.should_be_scraped: "false"
        io.prometheus.dockerswarm-services.should_be_probed: "false"
    logging: *x-default-logging
    ports:
      - published: 8080
        target: 8080
        mode: host
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /var/run
        target: /var/run
        read_only: true
      - type: bind
        source: /sys
        target: /sys
        read_only: true
      - type: bind
        source: /var/lib/docker
        target: /var/lib/docker
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      # If you are running Docker Desktop on macOS,
      # You'll need to comment out the following bind mounts
      - type: bind
        source: /dev/disk
        target: /dev/disk
        read_only: true
      - type: bind
        source: /dev/kmsg
        target: /dev/kmsg
        read_only: true
    hostname: "cadvisor.{{.Node.ID}}.cluster.local"
    networks:
      - dockerswarm_monitor
